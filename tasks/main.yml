---
# Creates an instances, and tags the resources created with the approriate cost targets
#
# See http://docs.ansible.com/ansible/ec2_tag_module.html#examples
# See http://docs.ansible.com/ansible/ec2_remote_facts_module.html
# See https://github.com/ansible/ansible/issues/14593
#
# This works in three stages:
#   1. Idempotently create the instance with a unique ID. If the instance has been created previously, this should fail
#      and terminate the run.
#   2. Get the ID from that creation. Do no state modification (such as tagging, or stopping and starting) here - the
#      implementation is buggy; we may stop or delete the wrong machine.
#   3. Modify state based on the fetched ID.
#
- name: Print the ec2_ami_id
  ansible.builtin.debug:
    msg: ec2_ami_id =  {{ ec2_ami_id }}

- name: "Ensure the webserver is provisioned"
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ec2_ami_id }}"
    security_groups: "{{ ec2_security_groups }}"
    wait_timeout: "300"
    count: 1
    tags: "{{ ec2_management_tags }}"
    detailed_monitoring: "{{ ec2_monitoring }}"
    region: "{{ ec2_region }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    instance_ids: "{{ ec2_id }}"
    volumes: "{{ ec2_volumes }}"
    instance_initiated_shutdown_behavior: "{{ ec2_instance_initiated_shutdown_behavior }}"
    instance_role: "{{ ec2_iam_role }}"
  register: "ec2_provisioner"

- name: "Set the EC2 reference from the idempotently created machine, for state modification"
  set_fact:
    ec2_instance_id: "{{ ec2_provisioner.instance_ids[0] }}"

- name: "debug"
  debug:
    var: "ec2_instance_id"

- name: "Enforce the instance state, groups"
  amazon.aws.ec2_instance:
    region: "{{ ec2_region }}"
    instance_ids:
      - "{{ ec2_instance_id }}"
    state: "{{ ec2_instance_state }}"
    security_groups: "{{ ec2_security_groups }}"

- name: "Enforce instance tags"
  amazon.aws.ec2_tag:
    resource: "{{ ec2_instance_id }}"
    region: "{{ ec2_region }}"
    state: "present"
    tags: "{{ ec2_management_tags | combine(ec2_tags) }}"
  when: ec2_instance_state != "absent"

- name: "Retrieve all volumes for the created instance"
  amazon.aws.ec2_vol_info:
    instance: "{{ ec2_instance_id }}"
    region: "{{ ec2_region }}"
    state: "list"
  when: ec2_instance_state != "absent"
  register: "ec2_vol"

- debug:
    var: "ec2_vol"

- name: "Ensure all volumes are tagged"
  amazon.aws.ec2_tag:
    region:  "{{ ec2_region }}"
    resource: '{{ item.id }}'
    state: "present"
    tags: "{{ ec2_management_tags | combine(ec2_tags) }}"
  with_items:
    - "{{ ec2_vol.volumes }}"
  when: ec2_instance_state != "absent"
